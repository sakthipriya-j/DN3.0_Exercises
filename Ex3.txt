Exercise 3: Sorting Customer Orders

Step 1: Understand Sorting Algorithms

Sorting Algorithms

1.Bubble Sort: O(n^2) - Simple but inefficient for large datasets.
2.Insertion Sort: O(n^2) - More efficient than bubble sort for small datasets.
3.Quick Sort: O(n log n) on average - Efficient and widely used.
4.Merge Sort: O(n log n) - Stable sort, useful for linked lists and large datasets.

Step 2: Setup

1.Create a class for Order.

Step 3: Implementation

class Order {
    int orderId;
    String customerName;
    double totalPrice;

    public Order(int orderId, String customerName, double totalPrice) {
        this.orderId = orderId;
        this.customerName = customerName;
        this.totalPrice = totalPrice;
    }
}

class Sorting {
    public void bubbleSort(Order[] orders) {
        int n = orders.length;
        for (int i = 0; i < n-1; i++) {
            for (int j = 0; j < n-i-1; j++) {
                if (orders[j].totalPrice > orders[j+1].totalPrice) {
                    Order temp = orders[j];
                    orders[j] = orders[j+1];
                    orders[j+1] = temp;
                }
            }
        }
    }

    public void quickSort(Order[] orders, int low, int high) {
        if (low < high) {
            int pi = partition(orders, low, high);
            quickSort(orders, low, pi-1);
            quickSort(orders, pi+1, high);
        }
    }

    private int partition(Order[] orders, int low, int high) {
        double pivot = orders[high].totalPrice;
        int i = (low-1);
        for (int j = low; j < high; j++) {
            if (orders[j].totalPrice <= pivot) {
                i++;
                Order temp = orders[i];
                orders[i] = orders[j];
                orders[j] = temp;
            }
        }
        Order temp = orders[i+1];
        orders[i+1] = orders[high];
        orders[high] = temp;
        return i+1;
    }
}

Step 4: Analysis

1.Bubble Sort: O(n^2) - Inefficient for large datasets due to quadratic time complexity.
2.Quick Sort: O(n log n) on average - Generally preferred for its efficiency, though it can degrade to O(n^2) in the worst case with poor pivot selection.

Preference

1.Quick Sort is generally preferred due to its average-case efficiency and practical performance.

