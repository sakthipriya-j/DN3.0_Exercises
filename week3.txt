Exercise 1: Control Structures
Scenario 1: Apply a discount to loan interest rates for customers above 60 years old.
BEGIN
  FOR rec IN (SELECT CustomerID, LoanID, InterestRate, DOB FROM Customers c 
              JOIN Loans l ON c.CustomerID = l.CustomerID) 
  LOOP
    IF (MONTHS_BETWEEN(SYSDATE, rec.DOB) / 12) > 60 THEN
      UPDATE Loans 
      SET InterestRate = InterestRate - 1
      WHERE LoanID = rec.LoanID;
    END IF;
  END LOOP;
  COMMIT;
END;
Scenario 2: Set IsVIP flag for customers with a balance over $10,000.
BEGIN
  FOR rec IN (SELECT CustomerID, Balance FROM Customers) 
  LOOP
    IF rec.Balance > 10000 THEN
      UPDATE Customers 
      SET IsVIP = 'TRUE'
      WHERE CustomerID = rec.CustomerID;
    END IF;
  END LOOP;
  COMMIT;
END;
Scenario 3: Send reminders to customers whose loans are due within the next 30 days.
BEGIN
  FOR rec IN (SELECT l.LoanID, c.Name, l.EndDate FROM Loans l 
              JOIN Customers c ON l.CustomerID = c.CustomerID
              WHERE l.EndDate BETWEEN SYSDATE AND SYSDATE + 30) 
  LOOP
    DBMS_OUTPUT.PUT_LINE('Reminder: ' || rec.Name || ', your loan is due on ' || TO_CHAR(rec.EndDate, 'DD-MM-YYYY'));
  END LOOP;
END;
Exercise 2: Error Handling
Scenario 1: Handle exceptions during fund transfers between accounts.
CREATE OR REPLACE PROCEDURE SafeTransferFunds(p_source_acc NUMBER, p_dest_acc NUMBER, p_amount NUMBER) 
IS
  insufficient_funds EXCEPTION;
  source_balance NUMBER;
BEGIN
  SELECT Balance INTO source_balance FROM Accounts WHERE AccountID = p_source_acc FOR UPDATE;
  
  IF source_balance < p_amount THEN
    RAISE insufficient_funds;
  ELSE
    UPDATE Accounts SET Balance = Balance - p_amount WHERE AccountID = p_source_acc;
    UPDATE Accounts SET Balance = Balance + p_amount WHERE AccountID = p_dest_acc;
  END IF;
  
  COMMIT;

EXCEPTION
  WHEN insufficient_funds THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds.');
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
Scenario 2: Handle exceptions when updating employee salaries.

CREATE OR REPLACE PROCEDURE UpdateSalary(p_emp_id NUMBER, p_percentage NUMBER) 
IS
  employee_not_found EXCEPTION;
  v_count NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_count FROM Employees WHERE EmployeeID = p_emp_id;

  IF v_count = 0 THEN
    RAISE employee_not_found;
  ELSE
    UPDATE Employees SET Salary = Salary * (1 + p_percentage / 100) WHERE EmployeeID = p_emp_id;
  END IF;
  
  COMMIT;

EXCEPTION
  WHEN employee_not_found THEN
    DBMS_OUTPUT.PUT_LINE('Error: Employee ID does not exist.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
Scenario 3: Handle exceptions when adding a new customer.
CREATE OR REPLACE PROCEDURE AddNewCustomer(p_cust_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER)
IS
  customer_exists EXCEPTION;
  v_count NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_count FROM Customers WHERE CustomerID = p_cust_id;

  IF v_count > 0 THEN
    RAISE customer_exists;
  ELSE
    INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified) 
    VALUES (p_cust_id, p_name, p_dob, p_balance, SYSDATE);
  END IF;
  
  COMMIT;

EXCEPTION
  WHEN customer_exists THEN
    DBMS_OUTPUT.PUT_LINE('Error: Customer with this ID already exists.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
Exercise 3: Stored Procedures
Scenario 1: Process monthly interest for all savings accounts.
CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest 
IS
BEGIN
  UPDATE Accounts
  SET Balance = Balance * 1.01
  WHERE AccountType = 'Savings';
  
  COMMIT;
END;
Scenario 2: Implement a bonus scheme for employees based on performance.
CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus(p_department VARCHAR2, p_bonus_percent NUMBER) 
IS
BEGIN
  UPDATE Employees
  SET Salary = Salary * (1 + p_bonus_percent / 100)
  WHERE Department = p_department;
  
  COMMIT;
END;
Scenario 3: Customers transfer funds between their accounts.
CREATE OR REPLACE PROCEDURE TransferFunds(p_source_acc NUMBER, p_dest_acc NUMBER, p_amount NUMBER) 
IS
  insufficient_funds EXCEPTION;
  source_balance NUMBER;
BEGIN
  SELECT Balance INTO source_balance FROM Accounts WHERE AccountID = p_source_acc FOR UPDATE;

  IF source_balance < p_amount THEN
    RAISE insufficient_funds;
  ELSE
    UPDATE Accounts SET Balance = Balance - p_amount WHERE AccountID = p_source_acc;
    UPDATE Accounts SET Balance = Balance + p_amount WHERE AccountID = p_dest_acc;
  END IF;

  COMMIT;

EXCEPTION
  WHEN insufficient_funds THEN
    DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds.');
    ROLLBACK;
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    ROLLBACK;
END;







Exercise 4: Functions
Scenario 1: Calculate the age of customers for eligibility checks.
CREATE OR REPLACE FUNCTION CalculateAge(p_dob DATE) 
RETURN NUMBER 
IS
  v_age NUMBER;
BEGIN
  v_age := FLOOR(MONTHS_BETWEEN(SYSDATE, p_dob) / 12);
  RETURN v_age;
END;
Scenario 2: Compute the monthly installment for a loan.
CREATE OR REPLACE FUNCTION CalculateMonthlyInstallment(p_loan_amount NUMBER, p_interest_rate NUMBER, p_duration_years NUMBER) 
RETURN NUMBER 
IS
  v_monthly_installment NUMBER;
  v_rate_per_month NUMBER;
  v_months NUMBER;
BEGIN
  v_rate_per_month := p_interest_rate / (12 * 100);  -- convert annual interest rate to monthly
  v_months := p_duration_years * 12;
  v_monthly_installment := (p_loan_amount * v_rate_per_month) / (1 - POWER((1 + v_rate_per_month), -v_months));
  RETURN v_monthly_installment;
END;
Scenario 3: Check if a customer has sufficient balance before making a transaction.

CREATE OR REPLACE FUNCTION HasSufficientBalance(p_account_id NUMBER, p_amount NUMBER) 
RETURN BOOLEAN 
IS
  v_balance NUMBER;
BEGIN
  SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = p_account_id;
  
  IF v_balance >= p_amount THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END;
Exercise 5: Triggers
Scenario 1: Automatically update the last modified date when a customer's record is updated.
CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
  :NEW.LastModified := SYSDATE;
END;
Scenario 2: Maintain an audit log for all transactions.
CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
  INSERT INTO AuditLog (TransactionID, AccountID, TransactionDate, Amount, TransactionType) 
  VALUES (:NEW.TransactionID, :NEW.AccountID, :NEW.TransactionDate, :NEW.Amount, :NEW.TransactionType);
END;
Scenario 3: Enforce business rules on deposits and withdrawals.
CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
BEGIN
  IF :NEW.TransactionType = 'Withdrawal' THEN
    DECLARE
      v_balance NUMBER;
    BEGIN
      SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = :NEW.AccountID;
      IF :NEW.Amount > v_balance THEN
        RAISE_APPLICATION_ERROR(-20001, 'Withdrawal amount exceeds the balance.');
      END IF;
    END;
  ELSIF :NEW.TransactionType = 'Deposit' THEN
    IF :NEW.Amount <= 0 THEN
      RAISE_APPLICATION_ERROR(-20002, 'Deposit amount must be positive.');
    END IF;
  END IF;
END;
Exercise 6: Cursors
Scenario 1: Generate monthly statements for all customers.
DECLARE
  CURSOR cur_transactions IS
    SELECT c.CustomerID, c.Name, t.TransactionDate, t.Amount, t.TransactionType 
    FROM Customers c 
    JOIN Accounts a ON c.CustomerID = a.CustomerID 
    JOIN Transactions t ON a.AccountID = t.AccountID 
    WHERE EXTRACT(MONTH FROM t.TransactionDate) = EXTRACT(MONTH FROM SYSDATE)
    AND EXTRACT(YEAR FROM t.TransactionDate) = EXTRACT(YEAR FROM SYSDATE);

BEGIN
  FOR rec IN cur_transactions 
  LOOP
    DBMS_OUTPUT.PUT_LINE('Customer: ' || rec.Name || ' | Date: ' || TO_CHAR(rec.TransactionDate, 'DD-MM-YYYY') || ' | Amount: ' || rec.Amount || ' | Type: ' || rec.TransactionType);
  END LOOP;
END;
Scenario 2: Apply an annual fee to all accounts.
DECLARE
  CURSOR cur_accounts IS
    SELECT AccountID, Balance FROM Accounts;
  v_annual_fee CONSTANT NUMBER := 100; -- Annual fee amount
BEGIN
  FOR rec IN cur_accounts 
  LOOP
    UPDATE Accounts
    SET Balance = Balance - v_annual_fee
    WHERE AccountID = rec.AccountID;
  END LOOP;
  
  COMMIT;
END;
Scenario 3: Update the interest rate for all loans based on a new policy.
DECLARE
  CURSOR cur_loans IS
    SELECT LoanID, InterestRate FROM Loans;
  v_new_rate CONSTANT NUMBER := 5; -- New interest rate
BEGIN
  FOR rec IN cur_loans 
  LOOP
    UPDATE Loans
    SET InterestRate = v_new_rate
    WHERE LoanID = rec.LoanID;
  END LOOP;
  
  COMMIT;
END;
Exercise 7: Packages
Scenario 1: Group all customer-related procedures and functions into a package.
CREATE OR REPLACE PACKAGE CustomerManagement AS
  PROCEDURE AddNewCustomer(p_cust_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER);
  PROCEDURE UpdateCustomerDetails(p_cust_id NUMBER, p_name VARCHAR2, p_dob DATE);
  FUNCTION GetCustomerBalance(p_cust_id NUMBER) RETURN NUMBER;
END CustomerManagement;

CREATE OR REPLACE PACKAGE BODY CustomerManagement AS
  PROCEDURE AddNewCustomer(p_cust_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER) IS
  BEGIN
    INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
    VALUES (p_cust_id, p_name, p_dob, p_balance, SYSDATE);
    COMMIT;
  END AddNewCustomer;
  
  PROCEDURE UpdateCustomerDetails(p_cust_id NUMBER, p_name VARCHAR2, p_dob DATE) IS
  BEGIN
    UPDATE Customers SET Name = p_name, DOB = p_dob, LastModified = SYSDATE WHERE CustomerID = p_cust_id;
    COMMIT;
  END UpdateCustomerDetails;
  
  FUNCTION GetCustomerBalance(p_cust_id NUMBER) RETURN NUMBER IS
    v_balance NUMBER;
  BEGIN
    SELECT Balance INTO v_balance FROM Customers WHERE CustomerID = p_cust_id;
    RETURN v_balance;
  END GetCustomerBalance;
END CustomerManagement;
Scenario 2: Create a package to manage employee data.
CREATE OR REPLACE PACKAGE EmployeeManagement AS
  PROCEDURE HireEmployee(p_emp_id NUMBER, p_name VARCHAR2, p_position VARCHAR2, p_salary NUMBER, p_department VARCHAR2);
  PROCEDURE UpdateEmployeeDetails(p_emp_id NUMBER, p_name VARCHAR2, p_position VARCHAR2);
  FUNCTION CalculateAnnualSalary(p_emp_id NUMBER) RETURN NUMBER;
END EmployeeManagement;

CREATE OR REPLACE PACKAGE BODY EmployeeManagement AS
  PROCEDURE HireEmployee(p_emp_id NUMBER, p_name VARCHAR2, p_position VARCHAR2, p_salary NUMBER, p_department VARCHAR2) IS
  BEGIN
    INSERT INTO Employees (EmployeeID, Name, Position, Salary, Department, HireDate)
    VALUES (p_emp_id, p_name, p_position, p_salary, p_department, SYSDATE);
    COMMIT;
  END HireEmployee;
  
  PROCEDURE UpdateEmployeeDetails(p_emp_id NUMBER, p_name VARCHAR2, p_position VARCHAR2) IS
  BEGIN
    UPDATE Employees SET Name = p_name, Position = p_position WHERE EmployeeID = p_emp_id;
    COMMIT;
  END UpdateEmployeeDetails;
  
  FUNCTION CalculateAnnualSalary(p_emp_id NUMBER) RETURN NUMBER IS
    v_salary NUMBER;
  BEGIN
    SELECT Salary * 12 INTO v_salary FROM Employees WHERE EmployeeID = p_emp_id;
    RETURN v_salary;
  END CalculateAnnualSalary;
END EmployeeManagement;
Scenario 3: Group all account-related operations into a package.
CREATE OR REPLACE PACKAGE AccountOperations AS
  PROCEDURE OpenAccount(p_account_id NUMBER, p_cust_id NUMBER, p_type VARCHAR2, p_balance NUMBER);
  PROCEDURE CloseAccount(p_account_id NUMBER);
  FUNCTION GetTotalBalance(p_cust_id NUMBER) RETURN NUMBER;
END AccountOperations;

CREATE OR REPLACE PACKAGE BODY AccountOperations AS
  PROCEDURE OpenAccount(p_account_id NUMBER, p_cust_id NUMBER, p_type VARCHAR2, p_balance NUMBER) IS
  BEGIN
    INSERT INTO Accounts (AccountID, CustomerID, AccountType, Balance, LastModified)
    VALUES (p_account_id, p_cust_id, p_type, p_balance, SYSDATE);
    COMMIT;
  END OpenAccount;
  
  PROCEDURE CloseAccount(p_account_id NUMBER) IS
  BEGIN
    DELETE FROM Accounts WHERE AccountID = p_account_id;
    COMMIT;
  END CloseAccount;
  
  FUNCTION GetTotalBalance(p_cust_id NUMBER) RETURN NUMBER IS
    v_total_balance NUMBER;
  BEGIN
    SELECT SUM(Balance) INTO v_total_balance FROM Accounts WHERE CustomerID = p_cust_id;
    RETURN v_total_balance;
  END GetTotalBalance;
END AccountOperations;